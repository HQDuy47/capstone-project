name: Deploy Production

on:
  # push:
  #   # Publish `main` as Docker `latest` image.
  #   branches:
  #     - main

  #   # Publish `v1.2.3` tags as releases.
  #   tags:
  #     - v*
  workflow_dispatch:
    inputs:
      deployTarget:
        description: 'Deploy to production with target'
        required: true
        default: 'main'
      deployBackend:
        description: 'Deploy backend? (yes/no)'
        required: true
        default: 'yes'
      deployFrontend:
        description: 'Deploy frontend? (yes/no)'
        required: true
        default: 'yes'
      deployKafkaConsumer:
        description: 'Deploy Kafka consumer? (yes/no)'
        required: true
        default: 'no'

env:
  FRONT_END_IMAGE_NAME: findyourjob-frontend
  BACK_END_IMAGE_NAME: findyourjob-api
  KAFKA_CONSUMER_IMAGE_NAME: findyourjob-kafka-consumer

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-frontend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deployFrontend == 'yes' }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.deployTarget }}

      - name: Build image
        run: DOCKER_BUILDKIT=1 docker build "$PWD" --build-arg DEPLOY_KEY="${{ secrets.DEPLOY_KEY }}" --build-arg commit="$(git rev-parse --short HEAD 2>/dev/null)" --build-arg version=$VERSION -t $FRONT_END_IMAGE_NAME
        working-directory: frontend

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$FRONT_END_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $FRONT_END_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  build-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deployBackend == 'yes' }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.deployTarget }}

      - name: Build image
        run: DOCKER_BUILDKIT=1 docker build "$PWD" --build-arg DEPLOY_KEY="${{ secrets.DEPLOY_KEY }}" --build-arg commit="$(git rev-parse --short HEAD 2>/dev/null)" --build-arg version=$VERSION -t $BACK_END_IMAGE_NAME
        working-directory: backend

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BACK_END_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $BACK_END_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  build-kafka-consumer:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deployKafkaConsumer == 'yes' }}
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.deployTarget }}

      - name: Build image
        run: DOCKER_BUILDKIT=1 docker build "$PWD" --build-arg DEPLOY_KEY="${{ secrets.DEPLOY_KEY }}" --build-arg commit="$(git rev-parse --short HEAD 2>/dev/null)" --build-arg version=$VERSION -t $KAFKA_CONSUMER_IMAGE_NAME
        working-directory: kafka-elk

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$KAFKA_CONSUMER_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $KAFKA_CONSUMER_IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-kafka-consumer]
    if: ${{ github.event.inputs.deployFrontend == 'yes' || github.event.inputs.deployBackend == 'yes' || github.event.inputs.deployKafkaConsumer == 'yes' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.deployTarget }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - uses: azure/setup-kubectl@v1
        id: install

      # - name: Save DigitalOcean kubeconfig
      #   run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_ID }}

      - name: Deploy
        run: |
          echo "${{ secrets.KUBECONFIG }}" > config.yaml
          export KUBECONFIG=${PWD}/config.yaml
          kubectl rollout restart deployment/findyourjob-frontend deployment/findyourjob-api deployment/findyourjob-kafka-consumer
          kubectl wait --for=condition=available --timeout=600s deployment/findyourjob-frontend deployment/findyourjob-api deployment/findyourjob-kafka-consumer

# kubectl wait --for=condition=available --timeout=600s deployment/findyourjob-api
# kubectl rollout restart deployment/findyourjob-api
